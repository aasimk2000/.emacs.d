* QOL
** Splash screen
   #+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
   #+END_SRC
** Frame related
   #+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (column-number-mode 1)
  (blink-cursor-mode -1)

  ;; Disable sound when scrolling past end
  (setq ring-bell-function #'ignore
	visible-bell nil)

  ;; Don't stretch the cursor to fit wide characters, it is disorienting,
  ;; especially for tabs.
  (setq x-stretch-cursor nil)

  ;; A simple frame title
  (setq frame-title-format '("%b â€“ Emacs")
	icon-title-format frame-title-format)

  ;; always avoid GUI
  (setq use-dialog-box nil)
  ;; Don't display floating tooltips; display their contents in the echo-area.
  (if (bound-and-true-p tooltip-mode) (tooltip-mode -1))


  ;; Setting default frame width and height
  (add-to-list 'default-frame-alist '(height . 48))
  (add-to-list 'default-frame-alist '(width . 160))

  ;; use y-n instead of yes-no
  (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC
** Splits
   #+BEGIN_SRC emacs-lisp
   ;; Favor vertical splits over horizontal ones
  (setq split-width-threshold 160
	split-height-threshold nil)
   #+END_SRC
** Line numbers
   #+BEGIN_SRC emacs-lisp
  ;; Line numbers
  (setq-default display-line-numbers-width 3)

  ;;line numbers in most modes
  (setq display-line-numbers 'relative
	display-line-numbers-current-absolute t)
  (dolist (hook '(prog-mode-hook text-mode-hook conf-mode-hook))
    (add-hook hook #'display-line-numbers-mode))
   #+END_SRC
** Font
   #+BEGIN_SRC emacs-lisp
     ;; Set font
     (set-frame-font "Menlo-12" nil t)
   #+END_SRC

* Editor
** Evil
   #+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-C-u-scroll t)
    :config
    (evil-mode 1))
   #+END_SRC
*** Evil escape
    #+BEGIN_SRC emacs-lisp
  (use-package evil-escape
    :ensure t
    :init
    (setq-default evil-escape-key-sequence "ht")
    :config
    (evil-escape-mode 1))
    #+END_SRC
** Smartparens
   #+BEGIN_SRC emacs-lisp
     (use-package smartparens
       :ensure t
       :config
       (require 'smartparens-config)
       ;; Overlays are too distracting and not terribly helpful. show-parens does
       ;; this for us already, so...
       (setq sp-highlight-pair-overlay nil
	     sp-highlight-wrap-overlay nil
	     sp-highlight-wrap-tag-overlay nil)
       ;; But if someone does want overlays enabled, evil users will be stricken with
       ;; an off-by-one issue where smartparens assumes you're outside the pair when
       ;; you're really at the last character in insert mode. We must correct this
       ;; vile injustice.
       (setq sp-show-pair-from-inside t)
       ;; ...and stay highlighted until we've truly escaped the pair!
       (setq sp-cancel-autoskip-on-backward-movement nil)

       ;; The default is 100, because smartparen's scans are relatively expensive
       ;; (especially with large pair lists for somoe modes), we halve it, as a
       ;; better compromise between performance and accuracy.
       (setq sp-max-prefix-length 50)
       ;; This speeds up smartparens. No pair has any business being longer than 4
       ;; characters; if they must, the modes that need it set it buffer-locally.
       (setq sp-max-pair-length 4)
       ;; This isn't always smart enough to determine when we're in a string or not.
       ;; See https://github.com/Fuco1/smartparens/issues/783.
       (setq sp-escape-quotes-after-insert nil)

       ;; Smartparens breaks evil-mode's replace state
       (add-hook 'evil-replace-state-entry-hook #'turn-off-smartparens-mode)
       (add-hook 'evil-replace-state-exit-hook  #'turn-on-smartparens-mode)

       (smartparens-global-mode +1))
   #+END_SRC
** Recents
   #+BEGIN_SRC emacs-lisp
     (use-package recentf
       :commands recentf-open-files
       :config
       (setq recentf-auto-cleanup 'never
	     recentf-max-menu-items 0
	     recentf-max-saved-items 200
	     recentf-exclude
	     (list "\\.\\(?:gz\\|gif\\|svg\\|png\\|jpe?g\\)$" "^/tmp/" "^/ssh:"
		   "\\.?ido\\.last$" "\\.revive$" "/TAGS$" "^/var/folders/.+$"))
       (recentf-mode 1))
   #+END_SRC
* Theme
  #+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    :init
    (setq doom-themes-enable-bold t
	  doom-themes-enable-italic t)
    (load-theme 'doom-one-light t)
    :config
    (doom-themes-visual-bell-config)
    (doom-themes-org-config))
  #+END_SRC
** Helm modeline
   #+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :ensure t)
  (use-package doom-modeline
    :ensure t
    :hook ((after-init . doom-modeline-init)))
   #+END_SRC
** Org bullets
   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :ensure t
       :hook (org-mode . org-bullets-mode))
   #+END_SRC
   
